# Tutorial 8: For loops and dynamic models {.unnumbered}

### Objectives:

-   Define for loops
-   Assign vector elements inside a for loop
-   Use for loops for iteratively solving a dynamic model

## For loops and vectors

### components of for loops

A for loop is a programming structure that repeats some code (called the body) a specified number of time. For example, you can write "Hello!" ten times like this:

```{webr-r}
for (i in 1:10) {
  print("Hello!")
}
```

The for loop starts with the keyword for, then has the expression in parentheses (i in 1:10). i is called the *loop variable*, in is another keyword, and 1:10 is a *loop vector*. After the first line there is a curly bracket { and everything that follows until the closing bracket } is the *loop body*. The loop body is executed as many times as there are elements in the loop vector (in this example, 10 times) and the only thing that changes is the values of the loop variable i, which starts with the first element of the vector (1) and goes until it reaches the last element (10) and then stops:

```{webr-r}
for (i in 1:10) {
  print(paste("Iteration number", i))
}
```

It can be used to do repetitive calculations, for example, adding up all the integers in an array (of course the built-in function sum() will do it too):

```{webr-r}
# add up the integers from 1 to 10 and print out the total
total<-0
for (i in 1:10) {
  total<-total+i
}
print(total)
```

### using vectors with loops

It is especially useful to use loops to assign vector variables one element at a time. The loop variable (i) is usually used for *indexing* the vector variable. There are several necessary features of using vectors in for loops, so let us take an example script and break them down in this example of calculating a vector of the sum of integers from 1 up to the current number:

1)  Pre-allocate the vector variable - i.e. create a vector of the correct length prior to the loop by filling it with a placeholder value, e.g. 0 or NA (not a value).

```{webr-r}
max <- 10 
total_vec <- rep(0, max+1) # pre-allocate the vector
```

2)  Only put in the loop what has to be repeated (e.g. don't put the pre-allocation inside the loop);

```{webr-r}
for (i in 1:max) { # iterate for i from 1 to max
  total_vec[i+1] <- total_vec[i] + i # assign to the next value of total_vec the sum of i and the current value of total_vec
}
```

3)  Be careful with indexing inside for loops - this means paying careful attention to the lowest and the highest index that you're using inside the loop. For example, if your loop vector goes from 1 to max (as above), the total number of elements in your vector will be max+1, because we assigned the element with index i+1 in the loop:

```{webr-r}
print(length(total_vec)) # print the number of elements of total_vec
print(total_vec)
```

### using for loops for solving discrete-time dynamic models

A first-order discrete time model of a variable $X(t)$ can be defined by an equation where the next value of the variable $X(t+1)$ is computed from the current value $X(t)$. For example the model

$$ X(t+1) = 1.5X(t)$$

describes a variable that is multiplied by 1.5 every time step. A for loop can be used to iteratively compute its solution, starting with a given initial value $X(0)$. The script below starts with the initial value 4, computes the solution for 10 steps and plots it (note that the time vector starts at 0 and goes through 10, while the index of the variable X goes from 1 to 11).

```{webr-r}
num <- 10
X <- rep(4, num + 1) # pre-allocate the solution vector with initial value
for (i in 1:num) {
  X[i+1] <- 1.5*X[i] # compute the next value X[i+1] from the current value X[i]
}
time <- 0:num
plot(time, X)
```

In the famous Fibonacci model the next value is defined to be the sum of two previous values in the sequence:

$$ F(t+2) = F(t+1) + F(t)$$ The script below iteratively calculates the solution, starting with initial values of $F(0)= F(1) = 1$ and plots the resulting sequence together with an exponential function that approximates it.

```{webr-r}
num_steps <- 20 # number of steps
fib <- rep(1, num_steps + 2) # pre-allocate vector with correct number of elements with all 1s
for (i in 1:num_steps) {
  fib[i+2] <- fib[i+1] + fib[i] # add elements i and i+1 and assign it to element i+2
}
time <- 0:(num_steps+1) # define a "time" vector as the independent variable
plot (time, fib, lwd = 3, xlab = 'time steps', ylab = "Fibonacci")
# an exponential function wiht the Golden ratio base
phi <- (1+sqrt(5))/2 # golden ratio
sol <- 0.75*phi^time # calculate the exponential function vector (no loop required)
lines(time, sol, col='red', lwd = 3) # overlay the exponential function plot
legend("topleft", # legend placement
       c("Fibonacci", "exponential"), # vector containing labels for the legend
       col=1:2, # vector containing color codes (1 is black, 2 is red)
       lty=c(0,1), # vector specifying line types (0 is none, 1 is regular line)
       pch=c(1,NA), # vector specifying types of point markers (1 is cicle, NA is none)
       lwd=3) 
```

### Exercises:

1.  Assign the value 5 to a variable named `mine`, then multiply it by 1.03, replacing the old value of the variable.

```{webr-r}
mine <- 5
mine*1.03
```

::: {.callout-caution collapse="true"}
## Hint

in the last line, use mine on both sides of the assignment
:::

2.  Write a script to take the variable `mine` with values 5 and multiply it by 1.03 one hundred times using a for loop. Use `print()` to show the result.

```{webr-r}
mine <- 5
```

::: {.callout-caution collapse="true"}
## Hint

use the for loop structure as defined in the tutorial above place the line of code you wrote in exercise 1 inside the for loop
:::

3.  Use `rep()` to preallocate a vector of values `mine` to be 101 zeros, then assign the first element to 5. Use a for loop to calculate 100 new values by multiplying the previous one by 1.03 and assigning them to sequential elements of the vector, then plot that vector as a function of the vector time.

```{webr-r}
time <- 0:100
mine <- rep(0,101)

```

::: {.callout-caution collapse="true"}
## Hint

assign 5 to mine\[1\] use the for loop structure from exercise 2 use index i to indicated the current element of mine: mine\[i\]
:::

4.  Fix the indexing error in the script below for calculating a vector of factorials `fact`. Each element of the vector `fact[i]` should be equal to $i!= 1 \times 2 \times 3 ... \times i$, so for example `fact[2]` should be 2 and `fact[3]` should be 6.

```{webr-r}
num <- 10
fact <- rep(1,num)
for (i in 1:num) {
  fact[i+1]<-fact[i]*i
}
print(fact)
```

::: {.callout-caution collapse="true"}
## Hint

check what each element is multiplied by
:::
